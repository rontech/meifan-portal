# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET         /                                                          controllers.Application.index

# Common
# get photo
GET         /getPhoto/:name                                            controllers.Application.getPhoto(name: ObjectId)
GET         /getPhotoByString/:name                                    controllers.Application.getPhotoByString(name: String)
POST        /upload                                                    controllers.Application.upload()
GET         /saveImg/:id                                               controllers.auth.Users.saveImg(id :ObjectId)


# FollowTypes
GET         /FollowTypes/add                                           controllers.FollowTypes.addFollowType
GET         /FollowTypes/main                                          controllers.FollowTypes.followTypeMain

#-------------------------------------------------
# 能被未登录用户看到的跳转
# Pages Which can be seen by anonymous.
#-------------------------------------------------
# Salon
GET         /salon                                                     controllers.noAuth.Salons.index
GET         /salon/:id                                                 controllers.noAuth.Salons.getSalon(id: ObjectId)
# Salon.style
GET         /salon/:slnId/style/:styId                                 controllers.noAuth.Salons.getOneStyle(slnId: ObjectId, styId: ObjectId)
GET         /salon/:salonId/styles                                     controllers.noAuth.Salons.getAllStyles(salonId: ObjectId)
# Salon.stylist
GET         /salon/:slnId/stylist/:stlId                               controllers.noAuth.Salons.getOneStylist(slnId: ObjectId, stlId: ObjectId)
GET         /salon/:salonId/stylists                                   controllers.noAuth.Salons.getAllStylists(salonId: ObjectId)
# Salon.coupon
GET         /salon/:salonId/coupons                                    controllers.noAuth.Salons.getAllCoupons(salonId: ObjectId)
POST        /salon/:salonId/coupons/condition                          controllers.noAuth.Salons.getCouponsByCondition(salonId: ObjectId)
# Salon.comment
GET         /salon/:salonId/comments                                   controllers.noAuth.Comments.findBySalon(salonId: ObjectId)
# Salon.blog
GET         /salon/:salonId/blogs                                      controllers.noAuth.Blogs.getAllBlogsOfSalon(salonId: ObjectId)
GET         /salon/:sid/blogsByMonth/:yyyymm                           controllers.noAuth.Blogs.getAllBlogsOfSalonByMonth(sid: ObjectId, yyyymm: String)
GET         /salon/:salonId/blogs/:stylistId                           controllers.noAuth.Blogs.getAllBlogsOfStylist(salonId: ObjectId, stylistId: ObjectId)
GET         /salon/:salonId/stylistBlogs/:userId                       controllers.noAuth.Blogs.getAuthorOfSalonBlog(salonId: ObjectId, userId: String)
GET         /salon/:salonId/blog/:blogId                               controllers.noAuth.Blogs.getOneBlogOfSalon(salonId: ObjectId, blogId: ObjectId)




# Style(Search)


# Coupon
GET         /createCoupon                                              controllers.auth.Coupons.createCoupon
#GET         /showCoupons/:salonId                                      controllers.auth.Coupons.showCoupons(salonId: ObjectId)
GET         /invalidCoupon/:couponId                                   controllers.auth.Coupons.invalidCoupon(couponId: ObjectId)
GET         /editCoupon/:couponId                                      controllers.auth.Coupons.editCouponInfo(couponId: ObjectId)
GET         /updateCoupon/:couponId                                    controllers.auth.Coupons.updateCoupon(couponId: ObjectId)

# Menu
GET         /createMenu/:salonId                                       controllers.Menus.createMenu(salonId: ObjectId)
GET         /editMenu/:menuId                                          controllers.Menus.editMenuInfo(menuId: ObjectId)
GET         /updateMenu/:menuId                                        controllers.Menus.updateMenu(menuId: ObjectId, salonId: ObjectId)
GET         /invalidMenu/:menuId                                       controllers.Menus.invalidMenu(menuId: ObjectId)

# Style
GET         /style                                                     controllers.Styles.index
GET         /style/:id                                                 controllers.Styles.findById(id: ObjectId)
POST        /styleSearchList                                           controllers.Styles.styleSearchList
GET         /findByLength/:styleLength/:consumerSex                    controllers.Styles.findByLength(styleLength: String, consumerSex: String)
GET         /findByImpression/:styleImpression/:consumerSex            controllers.Styles.findByImpression(styleImpression: String, consumerSex: String)
GET         /style/:salonId/:sex                                       controllers.Styles.findBySalonAndSex(salonId: ObjectId, sex: String)


# Stylist
#GET        /stylistViews/:id                                controllers.Stylists.findStylistById(id: ObjectId)
#GET        /stylist/:id                                     controllers.Stylists.findById(id: ObjectId)
GET         /stylist/mySalon/:stylistId                                	controllers.noAuth.Stylists.mySalonFromStylist(stylistId: ObjectId)

GET         /updateStylistInfo/:stylistId                              controllers.auth.Stylists.updateStylistInfo(stylistId: ObjectId)
POST        /toUpdateStylistInfo                                       controllers.auth.Stylists.toUpdateStylistInfo(stylistId: ObjectId)
GET         /agreeSalonApply/:salonId                       		   controllers.auth.Stylists.agreeSalonApply(salonId: ObjectId)
GET         /rejectSalonApply/:salonId                       		   controllers.auth.Stylists.rejectSalonApply(salonId: ObjectId)
GET         /findSalonApply/:stylistId                                 controllers.auth.Stylists.findSalonApply(stylistId: ObjectId)
#GET        /updateStyleByStylist/:styleId                   controllers.Stylists.updateStyleByStylist(styleId: ObjectId)
#GET        /deleteStyleByStylist/:styleId                   controllers.Stylists.deleteStyleByStylist(styleId: ObjectId)
#GET        /createStyleByStylist/:stylistId                 controllers.Stylists.createStyleByStylist(stylistId : ObjectId)

# User Login & Register & Public Info.
# Jump to User Login Page.
GET         /login                                                     controllers.Application.login
GET         /register                                                  controllers.Application.register

POST        /login                                                     controllers.auth.Users.login
GET         /logout                                                    controllers.auth.Users.logout
POST        /register                                                  controllers.noAuth.Users.register
GET         /user/:userId                                                   controllers.noAuth.Users.userPage(userId)



#-------------------------------------------------
# 用户管理：登录用户能看到的跳转
# Pages Which can only be seen by logined user.
#-------------------------------------------------
# User Management
POST        /update/:userId                                            controllers.auth.Users.updateInfo(userId)
GET         /myInfo                                                    controllers.auth.Users.myInfo
GET         /userInfo/:userId                                          controllers.auth.Users.userInfo(userId)
GET         /myPage                                                    controllers.auth.Users.myPage
GET         /myPage/myReservation                                      controllers.auth.Users.myReservation
GET         /userPage/followedCoupon                                   controllers.auth.MyFollows.followedCoupon(id: ObjectId)
GET         /userPage/followedBlog                                     controllers.auth.MyFollows.followedBlog(id: ObjectId)
GET         /userPage/followedStyle                                    controllers.auth.MyFollows.followedStyle(id: ObjectId)
GET         /userPage/followedSalon                                    controllers.noAuth.MyFollows.followedSalon(id: ObjectId)
GET         /userPage/followedStylist                                  controllers.noAuth.MyFollows.followedStylist(id: ObjectId)
GET         /userPage/followedUser                                     controllers.noAuth.MyFollows.followedUser(id:ObjectId)
GET         /userPage/followers                                        controllers.noAuth.MyFollows.followers(id:ObjectId)
GET         /myPage/messages/:req                                      controllers.auth.UserLetters.messageList(req:String)
GET         /myPage/message/:id                                        controllers.auth.UserLetters.showMessage(id:ObjectId)
GET         /sendMessage                                               controllers.auth.UserLetters.sendMessage
GET         /sendLetterPage/:id                                        controllers.auth.UserLetters.sendLetterPage(id)
POST        /sendLetter                                                controllers.auth.UserLetters.sendLetter



GET         /applyStylist                                              controllers.auth.Users.applyStylist
POST        /commitStylistApply                                        controllers.auth.Users.commitStylistApply
GET         /cancelFollow/:followedId                                  controllers.auth.MyFollows.cancelFollow(followedId:ObjectId)
GET         /addFollow/:followId                                       controllers.auth.MyFollows.addFollow(followId:ObjectId,followObjType:String)


# Reservations Management
GET         /findReserv/:page                                          controllers.Records.findReserv(page:Int)
GET         /cancelRecord/:id                                          controllers.Records.cancelRecord(id: ObjectId)
GET         /checkReservInfo/:id                                       controllers.Records.checkReservInfo(id: ObjectId)
GET         /selectStylistReserv                                       controllers.Records.selectStylistReserv
GET         /overdateRecord/:id                                        controllers.Records.overdateRecord(id: ObjectId)
GET         /finishRecord/:id                                          controllers.Records.finishRecord(id: ObjectId)
GET         /findRecordByCondition                                     controllers.Records.findRecordByCondition

# Comment
#POST   /addComment/:id/:commentedType  controllers.Comments.addComment(id : ObjectId, commentedType : Int)
GET        /reply/:commentObjId/:id/:commentObjType                    controllers.auth.Comments.reply(commentObjId : ObjectId, id : ObjectId, commentObjType : Int)
GET         /delete/:id/:commentObjId                                  controllers.auth.Comments.delete(id : ObjectId, commentObjId : ObjectId)
GET        /addComment/:commentObjId/:commentObjType                   controllers.auth.Comments.addComment(commentObjId : ObjectId, commentObjType : Int)
GET       /addCommentToCoupon/:commentObjId/:commentObjType            controllers.auth.Comments.addCommentToCoupon(commentObjId : ObjectId, commentObjType : Int)
 

#-------------------------------------------------
# 技师管理：认证技师能看到的跳转
# pages which can only be seen by logined styist.
#-------------------------------------------------

# add Blog
GET         /newBlog/:userId                                 controllers.auth.Blogs.newBlog(userId : String)
GET         /deleteBlog/:blogId                              controllers.auth.Blogs.deleteBlog(blogId : ObjectId)
GET         /:userId/showBlog                                controllers.noAuth.Blogs.getAllBlogsOfUser(userId : String)
GET         /showBlogById/:blogId                            controllers.noAuth.Blogs.getOneBlogById(blogId : ObjectId)
POST        /writeBlog/:userId                               controllers.auth.Blogs.writeBlog(userId : String)
GET         /editBlog/:blogId                                controllers.auth.Blogs.editBlog(blogId : ObjectId)
POST        /modBlog/:blogId                                 controllers.auth.Blogs.modBlog(blogId : ObjectId)








#-------------------------------------------------
# 商户管理：登录商家能看到的跳转
# pages which can only be seen by logined salon.
#-------------------------------------------------
#Salon Management
GET         /mySalon/stylist                                            controllers.auth.Salons.myStylist
GET         /mySalon/reserv                                             controllers.auth.Salons.myReserv
GET         /mySalon/comment                                            controllers.auth.Salons.myComment
GET         /mySalon/service                                            controllers.auth.Salons.myService
GET         /mySalon/coupon                                             controllers.auth.Salons.myCoupon
GET         /mySalon/createCoupon                                       controllers.auth.Coupons.couponMain
GET         /mySalon/menu                                               controllers.auth.Salons.myMenu
GET         /mySalon/createMenu                                         controllers.Menus.menuMain(id: ObjectId)
GET         /mySalon/checkHoldApply                                    controllers.auth.Salons.checkHoldApply
GET         /agreeStylistApply/:stylistId                              controllers.auth.Salons.agreeStylistApply(stylistId: ObjectId)
GET         /rejectStylistApply/:stylistId                             controllers.auth.Salons.rejectStylistApply(stylistId: ObjectId)
GET         /searchStylistById                                         controllers.auth.Salons.searchStylistById
GET         /inviteStylist/:stylistId/                                 controllers.auth.Salons.inviteStylist(stylistId: ObjectId)
GET         /checkInfoState                                 			controllers.auth.Salons.checkInfoState

# Salon Service 
GET         /addServiceType                                            controllers.ServiceTypes.addServiceType
GET         /serviceTypeMain                                           controllers.ServiceTypes.serviceTypeMain
#GET         /serviceMain                                     controllers.Services.serviceMain
#GET         /showAllServices                                 controllers.Services.servicesList
GET         /addService/:id                                            controllers.Services.addService(id: ObjectId)
GET         /showAllServices/:id                                       controllers.Services.deleteService(id: ObjectId, salonId: ObjectId)
GET         /showService                                               controllers.Services.showService(id: ObjectId, salonId: ObjectId)
GET         /showService/:id                                           controllers.Services.updateService(id: ObjectId, salonId: ObjectId)

#add reservation
GET         /reservHairView/:id                                        controllers.Reservations.reservHairView(id: ObjectId)
#GET         /reservSelectDate                                          controllers.Reservations.reservSelectDate
GET         /reservSelectStylist                                       controllers.Reservations.reservSelectStylist
POST        /reservConfirmPwd                                          controllers.Reservations.reservConfirmPwd
GET         /reservFinish                                              controllers.Reservations.reservFinish
GET         /reservConfirmInfo                                         controllers.Reservations.reservConfirmInfo




#add by ys-han
GET         /password                                                  controllers.auth.Users.password
POST        /changePassword/:userId                                    controllers.auth.Users.changePassword(userId)


# Map static resources from the /public folder to the /assets URL path
GET         /assets/*file                                              controllers.Assets.at(path="/public", file)


# User (change log image)
GET         /changeImage                                               controllers.auth.Users.changeImage


#salonAdmin (check stylist is activity)
GET         /salonAdmin/checkStylistIsValid/:stylistId        controllers.auth.Salons.checkStylistIsValid(stylistId: String)

#add styles by stylistId in stylist management
#GET         /findStylesByStylist/:stylistId                            controllers.Stylists.myStyles(stylistId: ObjectId)

#stylist (to remove salon)
GET         /removeSalon/:salonId                                        controllers.auth.Stylists.removeSalon(salonId: ObjectId)

#salonAdmin	(to remove stylist)
GET         /removeStylist/:stylistId                                   controllers.auth.Salons.removeStylist(stylistId: ObjectId)
	

#GET		/findStylistById/:stylistId                          controllers.Salons.findStylistById(stylistId: ObjectId)

#add by sangsang-hu
GET         /mySalon/sreachCoupon                                      controllers.auth.Coupons.findCoupons
GET         /mySalon/:salonId/sreachMenu                               controllers.MenuAdmin.findMenus(salonId: ObjectId)



GET          /replyBySalon/:commentObjId/:commentObjType               controllers.auth.Salons.replyBySalon(commentObjId : ObjectId, commentObjType : Int)
# auth
#GET    /showOtherBlog/:userId                                controllers.Blogs.showOtherBlog(userId : String)


#Salons (Salon check stylist info) Add by pingdou
GET         /updateStylistImage                             		   controllers.auth.Stylists.updateStylistImage
POST        /toUpdateStylistImage                                      controllers.auth.Stylists.toUpdateStylistImage
GET         /saveStylistImg/:imgId                                     controllers.auth.Stylists.saveStylistImg(imgId: ObjectId)

#add by hz-han
GET			/salonLogin				     					 controllers.Application.salonLogin
POST      	/loginSalon                                  	 controllers.auth.Salons.salonLogin
GET         /salonInfo/:salonId                             controllers.noAuth.Salons.salonInfoBasic(salonId: ObjectId)
GET         /salonInfoManage                                controllers.auth.Salons.salonInfoManage
GET         /salonUpd/:id                                   controllers.auth.Salons.update(id:ObjectId)
GET         /salonRegister                                   controllers.Application.salonRegister()
POST        /salonDoRegister                                 controllers.noAuth.Salons.doRegister()
GET         /updateSalonlogo                             	 controllers.auth.Salons.saveSalonImg(imgId: ObjectId)
POST		/imageUpload    		               			 controllers.auth.Salons.imageUpload
GET         /addImage   									 controllers.auth.Salons.addImage
GET         /salonPassword                                  controllers.auth.Salons.password

#POST        /changeSalonPassword/:id                         controllers.SalonInfo.salonChangePassword(id: ObjectId)
#add bu lu-zheng
GET         /mySalon/:id/createService                                 controllers.Services.serviceMain(id: ObjectId)



#add by pingdou (styles of stylist)
GET		/userPage/styles/:stylistId					         controllers.noAuth.Stylists.findStylesByStylist(stylistId: ObjectId)
POST	/findStylesBySerach/:stylistId				         controllers.noAuth.Stylists.findStylesBySerach(stylistId: ObjectId)
GET		/otherHomePage/:userId 								 controllers.noAuth.Stylists.otherHomePage(userId: ObjectId)	
GET		/checkSalonIsexitBySalonAccountId/:salonAccountId	 controllers.noAuth.Stylists.checkSalonIsexitBySalonAccountId(salonAccountId: String)
GET		/cutImg	 											 controllers.noAuth.Stylists.cutImg

GET     /styleUpdateByStylist/:styleId                       controllers.auth.Stylists.styleUpdateByStylist(styleId: ObjectId)
POST    /styleUpdateNewByStylist/                            controllers.auth.Stylists.styleUpdateNewByStylist
GET     /styleToInvalidByStylist/:styleId                    controllers.auth.Stylists.styleToInvalidByStylist(styleId: ObjectId)
GET     /styleAddByStylist/                                  controllers.auth.Stylists.styleAddByStylist
POST    /newStyleAddByStylist/                               controllers.auth.Stylists.newStyleAddByStylist
POST	/fileUploadAction									 controllers.auth.Stylists.fileUploadAction
GET		/myHomePage											 controllers.auth.Stylists.myHomePage
GET		/findStylistApplying/:stylistId						 controllers.auth.Stylists.findStylistApplying(stylistId: ObjectId)
GET		/wantToApply/:stylistId								 controllers.auth.Stylists.wantToApply(stylistId: ObjectId)
GET		/cancelMyApplying									 controllers.auth.Stylists.cancelMyApplying
GET		/toApplySalon/:salonId								 controllers.auth.Stylists.toApplySalon(salonId: ObjectId)
GET		/findSalonBySalonAccountId							 controllers.auth.Stylists.findSalonBySalonAccountId
				

#add by hui-fan (styles of salon)
GET     /getAllStylesBySalon/                                controllers.auth.Salons.getAllStylesBySalon
POST    /getAllStylesListBySalon/                            controllers.auth.Salons.getAllStylesListBySalon
GET     /styleUpdateBySalon/:styleId                         controllers.auth.Salons.styleUpdateBySalon(styleId: ObjectId)
POST    /styleUpdateNewBySalon/                              controllers.auth.Salons.styleUpdateNewBySalon
GET     /styleToInvalidBySalon/:styleId                      controllers.auth.Salons.styleToInvalidBySalon(styleId: ObjectId)
GET     /styleAddBySalon                                      controllers.auth.Salons.styleAddBySalon
POST    /newStyleAddBySalon/                                 controllers.auth.Salons.newStyleAddBySalon



# Questions add by jie-zhang (for common questions)
GET         /question/:qid                                             controllers.Questions.getOneQuestion(qid: ObjectId)
GET         /questions/                                                controllers.Questions.getAllQuestions()

# Reservation add by sangsang-hu
GET        /salon/:salonId/reserve/schedule/:week                 controllers.Reservations.reservShowDate(salonId: ObjectId, week: Int)

